generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model channel {
  id        String       @id
  name      String
  type      channel_type @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime

  @@index([profileId], map: "Channel_profileId_idx")
  @@index([serverId], map: "Channel_serverId_idx")
}

model conversation {
  id          String @id
  memberOneId String
  memberTwoId String

  @@unique([memberOneId, memberTwoId], map: "Conversation_memberOneId_memberTwoId_key")
  @@index([memberTwoId], map: "Conversation_memberTwoId_idx")
}

model directmessage {
  id             String   @id
  content        String   @db.Text
  fileUrl        String?  @db.Text
  memberId       String
  conversationId String
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime

  @@index([conversationId], map: "DirectMessage_conversationId_idx")
  @@index([memberId], map: "DirectMessage_memberId_idx")
}

model follow {
  id          String   @id
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([followerId], map: "Follow_followerId_idx")
  @@index([followingId], map: "Follow_followingId_idx")
}

model member {
  id        String      @id
  role      member_role @default(GUEST)
  profileId String
  serverId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime

  @@index([profileId], map: "Member_profileId_idx")
  @@index([serverId], map: "Member_serverId_idx")
}

model message {
  id        String   @id
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([channelId], map: "Message_channelId_idx")
  @@index([memberId], map: "Message_memberId_idx")
}

model profile {
  id        String   @id
  userId    String   @unique(map: "Profile_userId_key")
  userName  String   @unique(map: "Profile_userName_key")
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model server {
  id          String   @id
  name        String
  imageUrl    String   @db.Text
  inviteCode  String   @unique(map: "Server_inviteCode_key")
  description String   @db.Text
  departement String
  location    String   @db.Text
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  topic       String

  @@index([profileId], map: "Server_profileId_idx")
}

model servertopic {
  id        String @id
  nameTopic String
  serverId  String
}

enum member_role {
  ADMIN
  MODERATOR
  GUEST
}

enum channel_type {
  TEXT
  AUDIO
  VIDEO
}
